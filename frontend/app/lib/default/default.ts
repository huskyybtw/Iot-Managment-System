/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  HTTPValidationError,
  ScalarDocsGetParams
} from '.././model';





/**
 * @summary Scalar Docs
 */
export const scalarDocsGet = (
    params?: ScalarDocsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.get(
      `http://127.0.0.1:8000/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }




export const getScalarDocsGetQueryKey = (params?: ScalarDocsGetParams,) => {
    return [
    `http://127.0.0.1:8000/`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getScalarDocsGetQueryOptions = <TData = Awaited<ReturnType<typeof scalarDocsGet>>, TError = AxiosError<HTTPValidationError>>(params?: ScalarDocsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof scalarDocsGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getScalarDocsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scalarDocsGet>>> = ({ signal }) => scalarDocsGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof scalarDocsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ScalarDocsGetQueryResult = NonNullable<Awaited<ReturnType<typeof scalarDocsGet>>>
export type ScalarDocsGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Scalar Docs
 */

export function useScalarDocsGet<TData = Awaited<ReturnType<typeof scalarDocsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: ScalarDocsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof scalarDocsGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getScalarDocsGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



