/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  AuthLoginSchema,
  AuthResponse,
  HTTPValidationError,
  UserCreateSchema
} from '.././model';





/**
 * @summary Register
 */
export const registerAuthRegisterPost = (
    userCreateSchema: UserCreateSchema, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthResponse>> => {
    
    
    return axios.post(
      `http://127.0.0.1:8000/auth/register`,
      userCreateSchema,options
    );
  }



export const getRegisterAuthRegisterPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerAuthRegisterPost>>, TError,{data: UserCreateSchema}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof registerAuthRegisterPost>>, TError,{data: UserCreateSchema}, TContext> => {

const mutationKey = ['registerAuthRegisterPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerAuthRegisterPost>>, {data: UserCreateSchema}> = (props) => {
          const {data} = props ?? {};

          return  registerAuthRegisterPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterAuthRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerAuthRegisterPost>>>
    export type RegisterAuthRegisterPostMutationBody = UserCreateSchema
    export type RegisterAuthRegisterPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Register
 */
export const useRegisterAuthRegisterPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerAuthRegisterPost>>, TError,{data: UserCreateSchema}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof registerAuthRegisterPost>>,
        TError,
        {data: UserCreateSchema},
        TContext
      > => {

      const mutationOptions = getRegisterAuthRegisterPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Login
 */
export const loginAuthLoginPost = (
    authLoginSchema: AuthLoginSchema, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthResponse>> => {
    
    
    return axios.post(
      `http://127.0.0.1:8000/auth/login`,
      authLoginSchema,options
    );
  }



export const getLoginAuthLoginPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginAuthLoginPost>>, TError,{data: AuthLoginSchema}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof loginAuthLoginPost>>, TError,{data: AuthLoginSchema}, TContext> => {

const mutationKey = ['loginAuthLoginPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginAuthLoginPost>>, {data: AuthLoginSchema}> = (props) => {
          const {data} = props ?? {};

          return  loginAuthLoginPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginAuthLoginPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginAuthLoginPost>>>
    export type LoginAuthLoginPostMutationBody = AuthLoginSchema
    export type LoginAuthLoginPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Login
 */
export const useLoginAuthLoginPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginAuthLoginPost>>, TError,{data: AuthLoginSchema}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof loginAuthLoginPost>>,
        TError,
        {data: AuthLoginSchema},
        TContext
      > => {

      const mutationOptions = getLoginAuthLoginPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Me
 */
export const meAuthMeGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthResponse>> => {
    
    
    return axios.get(
      `http://127.0.0.1:8000/auth/me`,options
    );
  }




export const getMeAuthMeGetQueryKey = () => {
    return [
    `http://127.0.0.1:8000/auth/me`
    ] as const;
    }

    
export const getMeAuthMeGetQueryOptions = <TData = Awaited<ReturnType<typeof meAuthMeGet>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof meAuthMeGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMeAuthMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof meAuthMeGet>>> = ({ signal }) => meAuthMeGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof meAuthMeGet>>, TError, TData> & { queryKey: QueryKey }
}

export type MeAuthMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof meAuthMeGet>>>
export type MeAuthMeGetQueryError = AxiosError<unknown>


/**
 * @summary Me
 */

export function useMeAuthMeGet<TData = Awaited<ReturnType<typeof meAuthMeGet>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof meAuthMeGet>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getMeAuthMeGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



